name: Scrape and Update GitHub Pages

on:
  schedule:
    - cron: '0 */2 * * *'  # Runs every hour
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write  # Allow GitHub Actions bot to push changes

jobs:
  scrape-and-update:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Use Node.js 18 (required for Cheerio dependencies)

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install axios cheerio puppeteer

      # Step 4: Run the scraping script
      - name: Run scraping script
        run: node scrape.js

      # Step 5: Configure Git
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

      # Step 6: Commit data.json changes
      - name: Commit data.json changes
        id: commit_data
        run: |
          git add data.json
          git diff --staged --quiet || (git commit -m "Update flight data" && echo "changes=true" >> $GITHUB_OUTPUT)
          
      # Step 7: Update history.json if data.json changed - with improved preservation
      - name: Update history.json
        if: steps.commit_data.outputs.changes == 'true'
        run: |
          # Make sure we have the latest history.json
          git pull origin $(git branch --show-current) --no-rebase || echo "No remote updates to pull"
          
          # Add current data to history with timestamp
          node -e "
            const fs = require('fs');
            const currentData = JSON.parse(fs.readFileSync('data.json', 'utf8'));
            
            console.log('Current flight data to be added to history:', JSON.stringify(currentData));
            
            // Add timestamp to the current data
            const entryWithTimestamp = {
              ...currentData,
              timestamp: new Date().toISOString()
            };
            
            let history = [];
            
            // Check if history.json exists and read it
            if (fs.existsSync('history.json')) {
              console.log('Found existing history.json file');
              try {
                const historyContent = fs.readFileSync('history.json', 'utf8');
                console.log('History file size:', historyContent.length, 'bytes');
                
                if (historyContent.trim()) {
                  history = JSON.parse(historyContent);
                  console.log('Successfully parsed history.json, found', history.length, 'entries');
                  
                  if (!Array.isArray(history)) {
                    console.log('History file exists but is not an array, creating new array');
                    history = [];
                  }
                } else {
                  console.log('History file is empty, starting new array');
                }
              } catch (err) {
                console.error('Error reading history.json:', err.message);
                console.log('Creating new history array due to error');
              }
            } else {
              console.log('No history.json found, creating new file');
            }
            
            // Create a backup of existing history if it exists
            if (history.length > 0) {
              fs.writeFileSync('history.json.bak', JSON.stringify(history, null, 2));
              console.log('Created backup of existing history with', history.length, 'entries');
            }
            
            // Append new entry to history
            history.push(entryWithTimestamp);
            console.log('Appended new entry to history, now has', history.length, 'entries');
            
            // Write updated history back to file
            fs.writeFileSync('history.json', JSON.stringify(history, null, 2));
            console.log('Successfully wrote updated history.json with', history.length, 'entries');
            
            // Verify the file was written correctly
            try {
              const verifyHistory = JSON.parse(fs.readFileSync('history.json', 'utf8'));
              console.log('Verification: history.json contains', verifyHistory.length, 'entries');
            } catch (err) {
              console.error('Verification failed:', err.message);
            }
          "
          
          echo "Checking history.json file status..."
          ls -la history.json*
          
          # Add history.json to git
          git add history.json
          
          # Commit with detailed message
          git commit -m "Update history log - append flight from $(date)" || echo "No changes to history.json"
          
          # Show git status for debugging
          git status

      # Step 8: Push all changes to GitHub Pages branch
      - name: Push changes
        run: git push
